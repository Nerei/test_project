################################################################################################
# Prints status to cmake log and to file
# Usage: pcl_output_status(<message>)
set(PCL_BUILD_INFO_FILE "${CMAKE_BINARY_DIR}/version_string.tmp")
file(REMOVE "${PCL_BUILD_INFO_FILE}")
function(pcl_output_status msg)
  message(STATUS "${msg}")
  string(REPLACE "\\" "\\\\" msg "${msg}")
  string(REPLACE "\"" "\\\"" msg "${msg}")
  file(APPEND "${PCL_BUILD_INFO_FILE}" "\"${msg}\\n\"\n")
endfunction()

################################################################################################
# Status report function. Automatically align right column and selects text based on condition.
# Usage:
#   status(<text>)
#   status(<heading> <value1> [<value2> ...])
#   status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )
function(status text)
  set(status_cond)
  set(status_then)
  set(status_else)

  set(status_current_name "cond")
  foreach(arg ${ARGN})
    if(arg STREQUAL "THEN")
      set(status_current_name "then")
    elseif(arg STREQUAL "ELSE")
      set(status_current_name "else")
    else()
      list(APPEND status_${status_current_name} ${arg})
    endif()
  endforeach()

  if(DEFINED status_cond)
    set(status_placeholder_length 32)
    string(RANDOM LENGTH ${status_placeholder_length} ALPHABET " " status_placeholder)
    string(LENGTH "${text}" status_text_length)
    if(status_text_length LESS status_placeholder_length)
      string(SUBSTRING "${text}${status_placeholder}" 0 ${status_placeholder_length} status_text)
    elseif(DEFINED status_then OR DEFINED status_else)
      pcl_output_status("${text}")
      set(status_text "${status_placeholder}")
    else()
      set(status_text "${text}")
    endif()

    if(DEFINED status_then OR DEFINED status_else)
      if(${status_cond})
        string(REPLACE ";" " " status_then "${status_then}")
        string(REGEX REPLACE "^[ \t]+" "" status_then "${status_then}")
        pcl_output_status("${status_text} ${status_then}")
      else()
        string(REPLACE ";" " " status_else "${status_else}")
        string(REGEX REPLACE "^[ \t]+" "" status_else "${status_else}")
        pcl_output_status("${status_text} ${status_else}")
      endif()
    else()
      string(REPLACE ";" " " status_cond "${status_cond}")
      string(REGEX REPLACE "^[ \t]+" "" status_cond "${status_cond}")
      pcl_output_status("${status_text} ${status_cond}")
    endif()
  else()
    pcl_output_status("${text}")
  endif()
endfunction()


function(print_configuration_summary)  
  status("")
  status("Summary configuration for PCL ${PCL_VERSION} =====================================")
  status("")
  status("Version control:"      ${SVN_REVISION})
  
  # ========================== build platform ==========================
  status("")
  status("  Platform:")
  status("    Host:"             ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_VERSION} ${CMAKE_HOST_SYSTEM_PROCESSOR})
  if(CMAKE_CROSSCOMPILING)
    status("    Target:"         ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION} ${CMAKE_SYSTEM_PROCESSOR})
  endif()
  status("    CMake:"            ${CMAKE_VERSION})
  status("    CMake generator:"  ${CMAKE_GENERATOR})
  status("    CMake build tool:" ${CMAKE_BUILD_TOOL})
  if(MSVC)
    status("    MSVC:"           ${MSVC_VERSION})
  endif()
  if(CMAKE_GENERATOR MATCHES Xcode)
    status("    Xcode:"          ${XCODE_VERSION})
  endif()
  if(NOT CMAKE_GENERATOR MATCHES "Xcode|Visual Studio")
    status("    Configuration:"  ${CMAKE_BUILD_TYPE})
  endif()

  # ========================== C/C++ options ==========================
  status("")
  status("  C/C++:")
  status("    Built as dynamic libs:"  BUILD_SHARED_LIBS THEN YES ELSE NO)
  status("    C++ Compiler:"           CMAKE_COMPILER_IS_GNUCXX THEN "${CMAKE_CXX_COMPILER} (ver ${CMAKE_GCC_REGEX_VERSION})" ELSE "${CMAKE_CXX_COMPILER}" )
  status("    C++ flags (Release):"    ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE})
  status("    C++ flags (Debug):"      ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG})
  status("    C Compiler:"             ${CMAKE_C_COMPILER})
  status("    C flags (Release):"      ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE})
  status("    C flags (Debug):"        ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG})
  if(WIN32)
    status("    Linker flags (Release):" ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
    status("    Linker flags (Debug):"   ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
  else()
    status("    Linker flags (Release):" ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
    status("    Linker flags (Debug):"   ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
  endif()
  status("    Precompiled headers:"     PCHSupport_FOUND AND ENABLE_PRECOMPILED_HEADERS THEN YES ELSE NO)

  # ========================== PCL modules ==========================
  status("")
  status("  PCL modules:")
  status("    To be built:"            PCL_MODULES_BUILD         THEN ${PCL_MODULES_BUILD_ST}          ELSE "-")
  status("    Disabled:"               PCL_MODULES_DISABLED_USER THEN ${PCL_MODULES_DISABLED_USER_ST}  ELSE "-")
  status("    Disabled by dependency:" PCL_MODULES_DISABLED_AUTO THEN ${PCL_MODULES_DISABLED_AUTO_ST}  ELSE "-")
  status("    Unavailable:"            PCL_MODULES_DISABLED_FORCE THEN ${PCL_MODULES_DISABLED_FORCE_ST} ELSE "-")
  status("    Sandbox:"            PCL_MODULES_DISABLED_FORCE THEN ${PCL_MODULES_DISABLED_FORCE_ST} ELSE "-")

  # ========================== Android details ==========================
  if(ANDROID)
    status("")
    status("  Android: ")
    status("    Android ABI:" ${ANDROID_ABI})
    status("    Native API level:" android-${ANDROID_NATIVE_API_LEVEL})
    status("    SDK target:" "${ANDROID_SDK_TARGET}")
    if(BUILD_WITH_ANDROID_NDK)
      status("    Android NDK:" "${ANDROID_NDK} (toolchain: ${ANDROID_TOOLCHAIN_NAME})")
    elseif(BUILD_WITH_STANDALONE_TOOLCHAIN)
      status("    Android toolchain:" "${ANDROID_STANDALONE_TOOLCHAIN}")
    endif()
    status("    android tool:"  ANDROID_EXECUTABLE  THEN "${ANDROID_EXECUTABLE} (${ANDROID_TOOLS_Pkg_Desc})" ELSE NO)
    status("    ant:"           ANT_EXECUTABLE      THEN "${ANT_EXECUTABLE} (ver ${ANT_VERSION})"            ELSE NO)
    status("    Google Play package:" BUILD_ANDROID_PACKAGE THEN YES ELSE NO)
  endif()

  # ========================== Third-party libraries ==========================
  status("")
  status("  Third-party libraries:")

  status("    Use PCL1.x:"     HAVE_PCL1x   THEN YES ELSE NO)
  status("    Use Boost:"      HAVE_BOOST   THEN "YES (ver. ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION})" ELSE NO)
  status("    Use Eigen:"      HAVE_EIGEN   THEN "YES (ver. ${EIGEN_WORLD_VERSION}.${EIGEN_MAJOR_VERSION}.${EIGEN_MINOR_VERSION})" ELSE NO)      
  status("    Use Flann:"      HAVE_FLANN   THEN "YES (ver. ${FLANN_VERSION_MAJOR}.${FLANN_VERSION_MINOR}.${FLANN_VERSION_PATCH})" ELSE NO) 
  status("    Use OpenNI:"     HAVE_OPENNI  THEN "YES (ver. ${XN_MAJOR_VERSION}.${XN_MINOR_VERSION}.${XN_MAINTENANCE_VERSION})" ELSE NO)
  status("    Use QHull:"      HAVE_QHULL   THEN YES ELSE NO)
  status("    Use VTK, QVTK:"  HAVE_VTK     THEN "YES (ver. ${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}.${VTK_BUILD_VERSION}), ${VTK_USE_QVTK}" ELSE NO)
  status("    Use QVTK:"       VTK_USE_QVTK THEN YES ELSE NO)
  
  if(DEFINED WITH_TBB)
    status("    Use TBB:"   HAVE_TBB   THEN "YES (ver. ${TBB_VERSION_MAJOR}.${TBB_VERSION_MINOR} interface ${TBB_INTERFACE_VERSION})" ELSE NO)
  endif()

  if(DEFINED WITH_CUDA)
    status("    Use Cuda:"  HAVE_CUDA  THEN "YES (ver. ${CUDA_VERSION_STRING})" ELSE NO)
  endif()

  status("    Use OpenCL:"  HAVE_OPENCL   THEN YES ELSE NO)
  status("    Use OpenMP:"  HAVE_OPENMP   THEN YES ELSE NO)  
  status("    Use MPI:"     MPI_CXX_FOUND THEN YES ELSE NO)
  
  
  if(HAVE_CUDA)
    status("")
    status("  NVIDIA CUDA:"            "(ver ${CUDA_VERSION_STRING})")    
    status("    NVIDIA GPU archs:"     ${PCL_CUDA_ARCH_BIN})
    status("    NVIDIA PTX archs:"     ${PCL_CUDA_ARCH_PTX})    
  endif()

  # ========================== documentation ==========================  
  if(BUILD_DOCS)
    status("")
    status("  Documentation:")    
    status("    Build documentation:" DOXYGEN_FOUND THEN YES ELSE NO)
    status("    Build htlm help:    " (DOCUMENTATION_HTML_HELP STREQUAL YES) THEN YES ELSE NO)    
  endif()
  
  # ========================== auxiliary ==========================
  status("")
  status("  Install path:" "${CMAKE_INSTALL_PREFIX}")
  status("")
  status("  <pcl/pcl_config.h> include:"   "${PCL_CONFIG_FILE_INCLUDE_DIR}")
  status("------------------------------------------------------------------------")  
  status("")
endfunction()